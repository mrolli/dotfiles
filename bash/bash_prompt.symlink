#!/usr/bin/env bash

function __git_prompt() {
  # Configure git prompt
  GIT_PS1_SHOWDIRTYSTATE=true
  GIT_PS1_SHOWSTASHSTATE=true
  GIT_PS1_SHOWUNTRACKEDFILES=true
  GIT_PS1_STATESEPARATOR="$2"
  GIT_PS1_SHOWUPSTREAM="auto verbose"

  out=$(__git_ps1 "%s")
  if [ -n "$out" ]
  then
    echo -e "${1}${out}"
  fi
}

# build $PS1 and $PS2
# in a function to encapuslate variables
# see https://misc.flogisoft.com/bash/tip_colors_and_formatting
function __ps_prompt() {
  # Save last command's exit status and history index
  ps1_status=$?
  ps1_histidx="\!"

  if tput setaf 1 &> /dev/null
  then
    tput sgr0 # reset colors
    bold=$(tput bold)
    reset=$(tput sgr0)
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    green=$(tput setaf 64)
    orange=$(tput setaf 166)
    purple=$(tput setaf 125)
    red=$(tput setaf 124)
    violet=$(tput setaf 61)
    white=$(tput setaf 15)
    yellow=$(tput setaf 136)
  else
    bold=''
    reset="\e[0m"
    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"
  fi

  # Highlight the user name when logged in as root.
  if [[ "${USER}" == "root" ]]
  then
    userStyle="${red}"
    prompt="#"
  else
    userStyle="${orange}"
    prompt="\$"
  fi

  # Highlight the hostname when connected via SSH.
  if [[ "${SSH_TTY}" ]]
  then
    hostStyle="${bold}${red}"
  else
    hostStyle="${green}"
  fi

  # Highlight conda env if activated
  ps1_conda=""
  if [ ! -z $CONDA_DEFAULT_ENV ]
  then
    ps1_conda="${blue}(${CONDA_DEFAULT_ENV})${reset} "
  fi

  # Highlight the history index when last cmd failed
  if [ $ps1_status -ne 0 ]
  then
    statusStyle="${red}"
  else
    statusStyle="${reset}"
  fi

  # Set the terminal title and prompt.
  PS1="\[${bold}\]\n" # newline
  PS1+="\[${userStyle}\]\u" # username
  PS1+="\[${white}\] at "
  PS1+="\[${hostStyle}\]\h" # host
  PS1+="\[${white}\] in "
  PS1+="\[${yellow}\]\w" # working directory full path
  PS1+="\$(__git_prompt \" ${white}on ${blue}\" \" ${violet}\]\")" # Git repository details
  PS1+="\n"
  PS1+="\[${statusStyle}\]$ps1_histidx \[${reset}\]" # index of last cmd
  PS1+="${ps1_conda}" # conda active end
  PS1+="\[${white}\]${prompt} \[${reset}\]" # `$` (and reset color)
  export PS1

  # Restore the original prompt for multiline commands (PS2). This overrides any
  # system-wide customisations in /etc/profile, for instance.
  export PS2='> ';

  # Restore the original prompt for select menus. This is unset initially and
  # seems to default to "#? ".
  unset PS3;

  #PS2="\[${yellow}\]â†’ \[${reset}\]"
  #export PS2
  # Include the current file and line number when tracing using "set -x" (PS4).
  ps4_parts=(
    # Same as the default: start with a plus sign that gets repeated based on
    # the current stack depth. (Bash repeats the first character of PS4.)
    '+ '

    # Make the following extra information stand out less.
    "${blue}${bold}"

    # Show the name of the current shell function, if any.
    '${FUNCNAME:-}'

    # Show the basename and line number of the source file or function, if
    # any. If there was a function name, put an "@" between the function name
    # and the file/function.
    '${BASH_SOURCE:+${FUNCNAME:+@}}'

    # Note that LINENO is reset from 1 inside a function body. Sometimes,
    # $LINENO is a negative number. I could not find any reference to this in
    # the man page, but it seems to have to happen when returning from another
    # function. Until I understand this more completely, I wrap it in
    # parentheses to clarify that it is not a regular line number.
    '${BASH_SOURCE:+${BASH_SOURCE##*/}:${LINENO/#-*/($LINENO)}}'

    # Use a tab to separate the file/function and line number from the actual
    # line of code, rather than a space, because this helps legibility. (It
    # decreases the "jaggedness" caused by differing lengthts of file names
    # and line numbers.) I prefer this to a newline because it keeps the trace
    # more compact.
    $'\t'

    # Reset the colour and style.
    "${reset}"
  );
  printf -v PS4 '%s' "${ps4_parts[@]}";
  export PS4;
  unset ps4_parts;
}

__ps_prompt
# preserve earlier PROMPT_COMMAND entries
#PROMPT_COMMAND="__ps_prompt; $PROMPT_COMMAND"


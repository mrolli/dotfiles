#!/usr/bin/env bash
# Bash completion support for music shell command

# Generates completion reply, appending a space to possible completion words,
# if necessary.
# It accepts 2 arguments though the second is optional:
# 1: List of possible completion words.
# 2: Generate possible completion matches for this word (optional).
function __musiccomp {
  local cur_="${2-$cur}"

  case "$cur_" in
    -*=)
      ;;
    *)
      local c i=0 IFS=$' \t\n'
      for c in $1; do
        if [[ $c == "$cur_"* ]]; then
          case $c in
            -*=*|*.) ;;
            *) c="$c " ;;
          esac
          COMPREPLY[i++]="$c"
        fi
      done
      ;;
  esac
}

# Searches for a command in $COMP_WORDS. If one is found
# the appropriate function from above is called, if not
# completion for global options is done.
function __music_complection {
  cur=${COMP_WORDS[COMP_CWORD]}
  # Words containing an equal sign get split into tokens in bash > 4, which
  # doesn't come in handy here.
  # This is handled here. bash < 4 does not split.
  declare -f _get_comp_words_by_ref >/dev/null && _get_comp_words_by_ref -n = cur

  COMPREPLY=()
  local i c=1 command

  while [ $c -lt $COMP_CWORD ]; do
    i="${COMP_WORDS[c]}"
    case "$i" in
      -*) ;;
      *) command="$i"; break ;;
    esac
    ((c++))
  done

  if [ -z $command ]; then
    case "$cur" in
      '-'*)
        __musiccomp "--help"
        ;;
      *)
        __musiccomp "launch mute next pause play playing playlist previous
                     quit resume rewind shuffle status stop unmute vol"
        ;;
    esac
    return
  fi

  local completion_func="__music_${command}"
  declare -f $completion_func >/dev/null && $completion_func
}

function __music_shuffle {
  case "$cur" in
    *)
      __musiccomp "off on toggle"
      return
      ;;
  esac
}

function __music_vol {
  case "$cur" in
    *)
      __musiccomp "up down 5 50 95"
      return
      ;;
  esac
}

# compdef _music music itunes
complete -o nospace -F __music_complection music

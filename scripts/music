#!/usr/bin/env bash

# Sources:
# https://alvinalexander.com/apple/itunes-applescript-examples-scripts-mac-reference/

function music() {
  local APP_NAME=Music
  local opt=$1
  local playlist=$2

  [ $# -gt 0 ] && shift

  case "$opt" in
    launch|play|pause|stop|rewind|resume|quit)
      ;;
    mute)
      opt="set mute to true"
      ;;
    unmute)
      opt="set mute to false"
      ;;
    next|previous)
      opt="$opt track"
      ;;
    vol)
      local new_volume volume=$(osascript -e "tell application \"$APP_NAME\" to get sound volume")
      if [ $# -eq 0 ]; then
        echo "Current volume is ${volume}."
        return 0
      fi
      case $1 in
        up) new_volume=$((volume + 10 < 100 ? volume + 10 : 100)) ;;
        down) new_volume=$((volume - 10 > 0 ? volume - 10 : 0)) ;;
        [0-9][0-9]) new_volume=$1 ;;
        *) echo "'$1' is not valid. Expected <0-100>, up or down."
           return 1 ;;
      esac
      opt="set sound volume to ${new_volume}"
      ;;
    playlist)
      # Inspired by: https://gist.github.com/nakajijapan/ac8b45371064ae98ea7f
      # If no playlist is provided, let the user choose from all available playlists
      # by presenting them via fzf
      if [[ -z "$playlist" ]]; then
        playlist=$(osascript -e 'tell application "Music" to get name of every playlist' | sed 's/, /\n/g' | sort | fzf)
      fi

      [[ -z "$playlist" ]] && exit 0

      osascript 2>/dev/null <<EOF
        tell application "$APP_NAME"
          set new_playlist to "$playlist" as string
          play playlist new_playlist
        end tell
EOF
      if [[ $? -eq 0 ]]; then
        opt="play"
      else
        opt="stop"
      fi
      ;;
    playing|status)
      local currenttrack currentartist state=$(osascript -e "tell application \"$APP_NAME\" to player state as string")
      if [[ "$state" = "playing" ]]; then
        currenttrack=$(osascript -e "tell application \"$APP_NAME\" to name of current track as string")
        currentartist=$(osascript -e "tell application \"$APP_NAME\" to artist of current track as string")
        echo -E "Listening to ${fg[yellow]}${currenttrack}${reset_color} by ${fg[yellow]}${currentartist}${reset_color}"
      else
        echo "$APP_NAME is $state"
      fi
      return 0
      ;;
    shuf|shuff|shuffle)
      local state=$1

      if [[ -n "$state" && ! "$state" =~ (on|off|toggle) ]]; then
        echo "Usage: $(basename $0) shuffle [on|off|toggle]. Invalid option ${state}"
        return 1
      fi

      case "$state" in
        on|off)
          [[ $state = "on" ]] && state="true" || state="false"
          osascript >/dev/null 2>&1 <<EOF
            tell application "Music"
              set shuffle enabled to $state
            end tell
EOF
          return 0
          ;;
        toggle|*)
          osascript >/dev/null 2>&1 <<EOF
            tell application "Music"
              if shuffle enabled is true then
                set shuffle enabled to false
                set display to "Shuffle is now disabled"
              else
                set shuffle enabled to true
                set display to "Shuffle is now enabled"
              end if
            end tell
EOF
          return 0
          ;;
      esac
      ;;
    ""|help|-h|--help)
      print_usage
      return 0
      ;;
    *)
      echo "Unknown option: $opt"
      return 1
      ;;
  esac

  osascript -e "tell application \"$APP_NAME\" to $opt"
}

function print_usage() {
  echo -n >&2 "Usage: $(basename $0) CMD [ARGS]
Controls Music app by invoking commands, see list below.

Available commands:
  launch|play|pause|stop|rewind|resume|quit
  mute|unmute                      Mute or unmute $APP_NAME
  next|previous                    Play next or previous track
  shuf|shuffle    [on|off|toggle]  Set shuffled playback. Default: toggle. Note: toggle doesn't support the MiniPlayer.
  vol             [0-100|up|down]  Get or set the volume. 0 to 100 sets the volume. 'up' / 'down' increases / decreases by 10 points. No argument displays current volume.
  playing|status                   Show what song is currently playing in Music.
  playlist        [playlist name]  Play specific playlist

Options:
  -h|--help      Show this message and exit
"
}

music "$1" "$2"

#!/usr/bin/env bash

scriptname=$(basename "$0")
filter="*"
numdig=2
prefix=""
dryrun="echo"
start=1
save_ext=true

print_usage() {
  echo -n >&2 "Usage: ${scriptname} [-f 'filter'] [-d numDigits] [-p prefix 'string'] [-s startInt] [-n]

Renumber a bunch of files sequentially start at $start by default with an increment of 1 and the number parl
padded to $numdig digits. The filter can be used to select only a subset of all files in the current
working dir or to fix numeric sort, i.e. when normal globbing would sort 10 between 1 and 2 and thus the
previous file 10 would become file 02. This can be fixed with a filter like this:

  ${scriptname} -f '*.?.jpg *.??.jpg'

Options:
  -d            Number of the digits to pad the number part to, defaults to $numdig
  -f            Glob pattern to select the files for the action, defaults to $filter
  -n            By default the renaming is carried out as a dry-run to illustrate
                what would happen. Add the flag -n to really rename the files.
  -p            Prefix to prepend to the number part, also privde the delimiter; defauls to \"$prefix\"
  -x            Do not take extension into account; by default extension is split off before renaming
                and finally readded again. This flag turns this behaviour off.
"
}

while getopts hnd:f:p:s:x OPTION
do
  case "${OPTION}" in
    h)
      print_usage
      exit 0
      ;;
    n) dryrun="";;
    d) numdig=${OPTARG};;
    f) filter="${OPTARG}";;
    p) prefix="${OPTARG}";;
    s) start=${OPTARG};;
    x) save_ext=false;;
  esac
done

i=$start
workdone=0
for file in $filter
do
  exit=""
  $save_ext && ext=".${file##*.}"
  name="${prefix}$(printf "%"$numdig"s" $i | tr " " "0")"
  ((i++))
  [ "${file}" == "${name}${ext}" ] && continue
  $dryrun mv -i $file $name$ext
  workdone=1
done

[ $workdone -eq 0 ] && echo "Nothing to do." || \
  ([ ! -z $dryrun ] && echo -e "\nThis was only a dry-run. Add -n if changes should really take effect.")

exit 0


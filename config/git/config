[user]
    name = Michael Rolli
    email = michael@rollis.ch
    signingkey = 4DFE5E3BF4982CAE
[alias]
    aliases = config --get-regexp alias
    branches = branch --all
    ci  = commit -v
    cia = commit -v --amend
    co  = checkout
    # Show contributors on current branch with number of commits
    contribs = shortlog --summary --numbered --email
    # Diff current HEAD to common ancestor of current HEAD and main
    dam = "!f() { git diff $(git merge-base main HEAD)..HEAD; }; f"
    # Find branches containing commit
    fap = fetch --all --prune
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # Show 20 commits on current branch on one line with commit graph
    l  = log --pretty=oneline -n 20 --graph --abbrev-commit
    # Same as above but with more infos like date and contributor
    lg = log --graph --pretty=format:'%C(yellow)%h%Creset -%C(red)%d%Creset %s %C(green)(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # Show commits with diff the given file was involved in
    ld = log --follow -p --stat --
    # Print current worktree's top-level directory
    r = "!f() { local tl=$(git rev-parse --show-toplevel); echo ${tl##*/}; }; f"
    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
    revert = revert -n
    s   = status -s
    st  = status
    tag = tag -l
    # Checkout previous commit on current branch
    cop = checkout HEAD^1
    # Checkout next commit on current branch
    con = "!f() { git log --reverse --pretty=%H main | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout; }; f"
[color]
    ui = auto
    interactive = true
    grep = true
    diff = true
    status = true
[color "diff"]
    new = green
    old = red
[core]
    autocrlf = input
    editor = nvim
    excludesfile = ~/.config/git/global-ignore
    pager = delta
[grep]
    lineNumber = true
[pack]
    threads = 0
[diff]
    renamelimit = 0
    renames = copies
    colorMoved = default
[merge]
    conflictstyle = diff3
[commit]
    template = ~/.config/git/message-template
    gpgSign = true
    verbose = true
[fetch]
    prune = true
[push]
    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = current
[achievement]
    upload = true
[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
[credential]
    helper = osxkeychain
[credential "https://github.com"]
    helper =
    helper = !gh auth git-credential
[credential "https://gist.github.com"]
    helper =
    helper = !gh auth git-credential
[credential "https://github.unibe.ch"]
    helper =
    helper = !gh auth git-credential
[tag]
    gpgSign = true
[init]
    defaultBranch = main
[pull]
    ff = only
[delta]
    navigate = true
    line-numbers = true
    syntax-theme = gruvbox-dark
    side-by-side = false
    file-modified-label = modified:
[interactive]
    diffFilter = delta --color-only
